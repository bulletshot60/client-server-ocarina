package FullSystem
public
	with MyClient, MyServer, Data_Model, POK;
	
	data Integer_Type
		properties
	    	Data_Model::Data_Representation => integer;
	end Integer_Type;
	
	processor client_processor
  	end client_processor;
  	
  	processor implementation client_processor.impl
  		properties
			POK::Slots_Allocation => ();
			POK::Slots => (30ms);
			POK::Scheduler => STATIC;
			POK::Architecture => x86;
			POK::BSP => x86_qemu;
  	end client_processor.impl;
  	
  	processor server_processor
  	end server_processor;
  	
  	processor implementation server_processor.impl
  		properties
			POK::Slots_Allocation => ();
			POK::Slots => (30ms);
			POK::Scheduler => STATIC;	
			POK::Architecture => x86;
			POK::BSP => x86_qemu;
  	end server_processor.impl;
	
	system full_system
	end full_system;
	
	system implementation full_system.impl
		subcomponents
			my_client: process MyClient::my_client_process_sender.impl;
			my_server: process MyServer::my_server_process.impl;
			my_client_receiver: process MyClient::my_client_process_receiver.impl;
			client_cpu: processor client_processor.impl;
			server_cpu: processor server_processor.impl;
		connections
			client_to_server: port my_client.out_data -> my_server.in_data;
			server_to_client: port my_server.out_data -> my_client_receiver.in_data;
		properties
			actual_processor_binding => (reference (client_cpu)) applies to my_client;
			actual_processor_binding => (reference (server_cpu)) applies to my_server;
			actual_processor_binding => (reference (client_cpu)) applies to my_client_receiver;
			POK::Architecture => x86;
			POK::BSP => x86_qemu;
	end full_system.impl;
	
end FullSystem;
